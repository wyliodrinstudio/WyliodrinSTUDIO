// DO NOT EDIT THIS FILE, IT IS AUTMATICALLY GENERATED

module.exports = function (blockly){
	var Blockly = blockly.Blockly;

	Blockly.Blocks['micropython_digital_input'] = {
		init: function() {
			this.appendValueInput('pin')
				.setCheck('Number')
				.appendField('Pin');
			this.appendDummyInput()
				.appendField(new Blockly.FieldDropdown([['PULL_UP','PULL_UP'], ['PULL_DOWN','PULL_DOWN']]), 'type');
			this.setInputsInline(true);
			this.setOutput(true, null);
			this.setColour(315);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_led'] = {
		init: function() {
			this.appendValueInput('LED')
				.setCheck('Number')
				.appendField('Pin');
			this.appendDummyInput()
				.appendField('Pin.OUT');
			this.setOutput(true, null);
			this.setColour(255);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_set_value'] = {
		init: function() {
			this.appendValueInput('pin_setValue')
				.setCheck('Variables')
				.appendField('set value')
				.appendField(new Blockly.FieldDropdown([['HIGH','0'], ['LOW','1']]), 'set_value')
				.appendField('for');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(230);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_get_value'] = {
		init: function() {
			this.appendValueInput('get_value')
				.setCheck('Variables')
				.appendField('get value of');
			this.setOutput(true, null);
			this.setColour(230);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_on_off'] = {
		init: function() {
			this.appendValueInput('set_valueLED')
				.setCheck('Variables')
				.appendField('set LED')
				.appendField(new Blockly.FieldDropdown([['on','on'], ['off','off']]), 'set_on/off');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(230);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_pwm'] = {
		init: function() {
			this.appendValueInput('pin')
				.setCheck('Number')
				.appendField('PWM')
				.appendField('Pin');
			this.appendValueInput('freq')
				.setCheck('Number')
				.appendField('freq');
			this.appendValueInput('duty')
				.setCheck('Number')
				.appendField('duty');
			this.setInputsInline(true);
			this.setOutput(true, null);
			this.setColour(335);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_pwm_methods'] = {
		init: function() {
			this.appendValueInput('methods')
				.setCheck(['Variables', 'Number'])
				.appendField('set PWM method ')
				.appendField(new Blockly.FieldDropdown([['freq','freq'], ['duty','duty'], ['deinit','deinit']]), 'methods');
			this.appendValueInput('NAME')
				.setCheck('Variables')
				.appendField('to');
			this.setInputsInline(true);
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(315);
			this.setTooltip('deinit() does not have parameter');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_declaration_rgb_1'] = {
		init: function() {
			this.appendValueInput('red')
				.setCheck(['micropython_pin', 'micropython_pwm'])
				.appendField('red');
			this.appendValueInput('green')
				.setCheck(['micropython_pin', 'micropython_pwm'])
				.appendField('green');
			this.appendValueInput('blue')
				.setCheck(['micropython_pin', 'micropython_pwm'])
				.appendField('blue');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(300);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_rgb_pwm_set'] = {
		init: function() {
			this.appendValueInput('NAME')
				.setCheck(null)
				.appendField('set rgb')
				.appendField(new Blockly.FieldDropdown([['red','red'], ['green','green'], ['blue','blue']]), 'rgb')
				.appendField(new Blockly.FieldTextInput('duty'), 'duty');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(300);
			this.setTooltip('pwm type');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_rgb_pin_set'] = {
		init: function() {
			this.appendDummyInput()
				.appendField('set rgb')
				.appendField(new Blockly.FieldDropdown([['red','red'], ['green','green'], ['blue','blue']]), 'rgb')
				.appendField(new Blockly.FieldDropdown([['on','on'], ['off','off']]), 'func');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(300);
			this.setTooltip('pin type');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_time'] = {
		init: function() {
			this.appendValueInput('micropython_time')
				.setCheck(['Number', 'Variables'])
				.appendField('time')
				.appendField(new Blockly.FieldDropdown([['sleep','sleep'], ['sleep_ms','sleep_ms'], ['sleep_us','sleep_us']]), 'time');
			this.setInputsInline(false);
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(330);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_sleep_from_time'] = {
		init: function() {
			this.appendValueInput('micropython_sleep_from_time')
				.setCheck(['Number', 'Variables'])
				.appendField('time')
				.appendField('sleep')
				.appendField(new Blockly.FieldDropdown([['second','sleep'], ['milliseconds','sleep_ms'], ['microseconds','sleep_us']]), 'unit_measurement');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(330);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_utime'] = {
		init: function() {
			this.appendValueInput('micropython_utime')
				.setCheck(['Number', 'Variables'])
				.appendField('utime')
				.appendField(new Blockly.FieldDropdown([['sleep','sleep'], ['sleep_us','sleep_us'], ['sleep_ms','sleep_ms'], ['localtime','localtime']]), 'utime');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(345);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_machine_time_pulse_us'] = {
		init: function() {
			this.appendValueInput('pin/var')
				.setCheck(['micropython_pin', 'Variables'])
				.appendField('set time_pulse_us');
				
			this.appendDummyInput()
				.appendField('with pulse level')
				.appendField(new Blockly.FieldDropdown([['0','0'], ['1','1']]), 'pulse');
			this.appendValueInput('timeout_us')
				.setCheck('Number')
				.appendField('timeout');
			this.appendValueInput('var')
				.appendField('for')
				.setCheck('Variables');
			this.setInputsInline(true);
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(195);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_adc'] = {
		init: function() {
			this.appendValueInput('adc_var')
				.setCheck('Number')
				.appendField('ADC');
			this.setOutput(true, null);
			this.setColour(150);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_adc_method'] = {
		init: function() {
			this.appendValueInput('NAME')
				.setCheck('Variables')
				.appendField('read from ADC for');
			this.setOutput(true, null);
			this.setColour(150);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};


	Blockly.Blocks['micropython_adc_pin'] = {
		init: function() {
			this.appendValueInput('adc_pin')
				.setCheck('Number')
				.appendField('ADC')
				.appendField('Pin');
			this.setOutput(true, null);
			this.setColour(150);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_i2c'] = {
		init: function() {
			this.appendDummyInput()
				.appendField('I2C')
				.appendField('id')
				.appendField(new Blockly.FieldTextInput('-1'), 'id');
			this.appendValueInput('scl')
				.setCheck('Number')
				.appendField('scl');
			this.appendValueInput('sda')
				.setCheck('Number')
				.appendField('sda');
			this.appendValueInput('freq')
				.setCheck('Number')
				.appendField('freq');
			this.setInputsInline(true);
			this.setOutput(true, null);
			this.setColour(315);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_i2c_scan'] = {
		init: function() {
			this.appendDummyInput()
				.appendField('I2C scan');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(315);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_i2c_operation'] = {
		init: function() {
			this.appendDummyInput()
				.appendField('I2C operation')
				.appendField(new Blockly.FieldDropdown([['start','start'], ['stop','stop']]), 'operation');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(315);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_i2c_standard_operation'] = {
		init: function() {
			this.appendValueInput('op')
				.setCheck('Boolean')
				.appendField('I2C ')
				.appendField(new Blockly.FieldDropdown([['readfrom','readfrom'], ['readfrom_into','readfrom_into'], ['writeto','writeto']]), 'operation')
				.appendField('addr')
				.appendField(new Blockly.FieldTextInput('0x3a'), 'addr')
				.appendField(new Blockly.FieldDropdown([['nbytes','nbytes'], ['buf','buf']]), 'NAME')
				.appendField(new Blockly.FieldTextInput('0'), 'input')
				.appendField('stop');
			this.setInputsInline(true);
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(315);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_spi'] = {
		init: function() {
			this.appendValueInput('SPI')
				.setCheck('Number')
				.appendField('SPI');
			this.appendValueInput('bauderate')
				.setCheck('Number')
				.appendField('bauderate');
			this.appendValueInput('polarity')
				.setCheck('Number')
				.appendField('polarity');
			this.appendValueInput('phase')
				.setCheck('Number')
				.appendField('phase');
			this.appendValueInput('sck')
				.setCheck('Number')
				.appendField('Pin')
				.appendField('sck');
			this.appendValueInput('mosi')
				.setCheck('Number')
				.appendField('Pin')
				.appendField('mosi');
			this.appendValueInput('miso')
				.setCheck('Number')
				.appendField('Pin')
				.appendField('miso');
			this.setInputsInline(true);
			this.setOutput(true, null);
			this.setColour(175);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_spi_init'] = {
		init: function() {
			this.appendValueInput('spi_init')
				.setCheck('Number')
				.appendField('SPI init')
				.appendField('bauderate');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(175);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_spi_read'] = {
		init: function() {
			this.appendValueInput('param1')
				.setCheck('Number')
				.appendField('SPI')
				.appendField(new Blockly.FieldDropdown([['read','read'], ['readinto','readinto']]), 'read');
			this.appendDummyInput()
				.appendField(new Blockly.FieldDropdown([['none','none'], ['0xff','0xff']]), 'NAME');
			this.setInputsInline(true);
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(175);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_spi_write'] = {
		init: function() {
			this.appendValueInput('param')
				.setCheck(['String', 'Variables'])
				.appendField('SPI')
				.appendField(new Blockly.FieldDropdown([['write','write'], ['write_readinto','write_readinto']]), 'write');
			this.appendDummyInput()
				.appendField(new Blockly.FieldDropdown([['none','none'], ['buf','buf']]), 'param2');
			this.setInputsInline(true);
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(175);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropythob_spi_create_buffer'] = {
		init: function() {
			this.appendValueInput('buf')
				.setCheck('Number')
				.appendField('bytearray');
			this.setOutput(true, null);
			this.setColour(175);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_print_format'] = {
		init: function() {
			this.appendDummyInput()
				.appendField('format')
				.appendField('print')
				.appendField(new Blockly.FieldTextInput('some text'), 'text_quotation_mark');
			this.appendValueInput('var1')
				.setCheck('Variables');
			this.appendValueInput('var2')
				.setCheck('Variables');
			this.appendValueInput('var3')
				.setCheck('Variables');
			this.setInputsInline(true);
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(120);
			this.setTooltip('In the field\'some text\' write brackets instead of variable name and in empty spaces put the variables.');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_dht'] = {
		init: function() {
			this.appendValueInput('dht')
				.setCheck('Number')
				.appendField('DHT11');
			this.setOutput(true, null);
			this.setColour(180);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_dht_sensors'] = {
		init: function() {
			this.appendValueInput('sensors')
				.setCheck('Variables')
				.appendField('DHT sensors')
				.appendField(new Blockly.FieldDropdown([['measure','measure'], ['temperature','temperature'], ['humidity','humidity']]), 'sensors')
				.appendField('for');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(180);
			this.setTooltip('first you have to measure');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_get_dht_sensors'] = {
		init: function() {
			this.appendValueInput('get_value_sensor')
				.setCheck('Variables')
				.appendField('get value from DHT sensor')
				.appendField(new Blockly.FieldDropdown([['temperature','temperature'], ['humidity','humidity']]), 'sensors')
				.appendField('for');
			this.setInputsInline(false);
			this.setOutput(true, null);
			this.setColour(180);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};
	
	Blockly.Blocks['micropython_try_catch'] = {
		init: function() {
			this.appendStatementInput('try_catch')
				.setCheck(null)
				.appendField('try');
			this.appendValueInput('except')
				.setCheck('Variables')
				.appendField('exept')
				.appendField(new Blockly.FieldTextInput('OSError'), 'error')
				.appendField('as');
			this.appendStatementInput('except_code')
				.setCheck(null);
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(105);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_network_wlan'] = {
		init: function() {
			this.appendDummyInput()
				.appendField('network.WLAN')
				.appendField(new Blockly.FieldDropdown([['STA_IF','STA_IF'], ['AP_IF','AP_IF']]), 'type');
			this.setOutput(true, null);
			this.setColour(165);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_network_set_active'] = {
		init: function() {
			this.appendValueInput('active')
				.setCheck('Variables')
				.appendField('interfaces active')
				.appendField(new Blockly.FieldDropdown([['True','True'], ['False','False']]), 'NAME');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(165);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_network_get_active'] = {
		init: function() {
			this.appendValueInput('get')
				.setCheck('Variables')
				.appendField('get active state from');
			this.setOutput(true, null);
			this.setColour(165);
			this.setTooltip('check if the interfaces are active');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_network_check_connection'] = {
		init: function() {
			this.appendValueInput('conn')
				.setCheck('Variables')
				.appendField('connection??')
				.appendField(new Blockly.FieldDropdown([['ifconfig','ifconfig'], ['isconnected','isconnected']]), 'conn');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(165);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};
	Blockly.Blocks['micropython_network_wifi'] = {
		init: function() {
			this.appendValueInput('NAME')
				.setCheck('Variables')
				.appendField('connect to WiFi network')
				.appendField(new Blockly.FieldTextInput('ESSID'), 'ESSID')
				.appendField(new Blockly.FieldTextInput('password'), 'password');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(165);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_network_scan'] = {
		init: function() {
			this.appendValueInput('scan')
				.setCheck('Variables')
				.appendField('scan');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(165);
			this.setTooltip('scan for access points');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['micropython_network_config'] = {
		init: function() {
			this.appendValueInput('config')
				.setCheck('Variables')
				.appendField('config')
				.appendField(new Blockly.FieldTextInput('mac'), 'NAME');
			this.setPreviousStatement(true, null);
			this.setNextStatement(true, null);
			this.setColour(165);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

};