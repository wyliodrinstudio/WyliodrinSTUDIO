// DO NOT EDIT THIS FILE, IT IS AUTMATICALLY GENERATED

module.exports = function (blockly) {
	var Blockly = blockly.Blockly;
	// var goog = blockly.goog;

	//Thermistor

	Blockly.Blocks['read_temperature_initialize'] = {
		init:function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(140);
			this.appendDummyInput()
				.appendField('Read temperature from thermistor');
			this.appendValueInput('pin')
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField('Thermistor pin');
			this.appendValueInput('resistance')
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField('With resistance');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Initialize thermistor sensor by adding the imports and setting up the pin.');
		}
	};

	Blockly.Blocks['get_temperature'] = {
		init:function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(140);
			this.appendDummyInput()
				.appendField('Get temperature from thermistor in');
			this.appendDummyInput()
				.appendField(new Blockly.FieldDropdown([['celsius', 'c'], ['fahrenheit', 'f']]), 'degrees_type');
			this.setOutput(true);
			this.setTooltip('Return the read temperature value based on the measurement unit selected.');
		}
	};
	
	//Servo

	Blockly.Blocks['initialize_servo'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(100);
			this.appendDummyInput()
				.appendField('Initialize SG90 servo');
			this.appendValueInput('pin')
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField('Servo pin');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Initialize the servo motor by adding the imports and setting up the pins.');
		}
	};

	Blockly.Blocks['initialize_servo_multiple'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(100);
			this.appendDummyInput()
				.appendField('Initialize SG90 servo');
			this.appendValueInput('pin')
				.setAlign(Blockly.ALIGN_RIGHT)
				.appendField('Servo pin');
			this.appendDummyInput()
				.appendField('Servo name')
				.appendField(new Blockly.FieldTextInput('servoName1'), 'servo_name');
			this.setInputsInline(false);
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Initialize thermistor sensor by adding the imports, setting up the pins and providing a name to indentify the servo motor. This should be used when using multiple servo motors.');
		}
	};

	Blockly.Blocks['set_angle'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(100);
			this.appendDummyInput()
				.appendField('Set position to ');
			this.appendValueInput('angle');
			this.appendDummyInput()
				.appendField('degrees');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Sets the position of the servo motor');
		}
	};

	Blockly.Blocks['set_angle_multiple'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(100);
			this.appendDummyInput()
				.appendField('Set position of')
				.appendField(new Blockly.FieldTextInput('servoName1'), 'servo_name')
				.appendField('to')
				.appendField(new Blockly.FieldTextInput('degrees'), 'angle')
				.appendField('degrees');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Sets the angle of the given servo motor, identified by it\'s name. This should be used when using multiple servo motors.');
		}
	};

	//Distance measurement
	
	Blockly.Blocks['distance_initialize'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(45);
			this.appendDummyInput()
				.appendField('Initialize HCSR04 distance sensor');
			this.appendValueInput('trigger_pin')
				.appendField('Trigger pin')
				.setAlign(Blockly.ALIGN_RIGHT);
			this.appendValueInput('echo_pin')
				.appendField('Echo pin')
				.setAlign(Blockly.ALIGN_RIGHT);		
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Initialize the distance sensor by adding the imports and setting up the pins.');	
		}
	};

	Blockly.Blocks['get_distance'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(45);
			this.appendDummyInput()
				.appendField('Get distance in')
				.appendField(new Blockly.FieldDropdown([['mm', 'mm'], ['cm', 'cm']]), 'unit');
			this.setOutput(true);
			this.setTooltip('Returns the distance read value based on the measurement unit selected.');
		}
	};

	//Weather

	Blockly.Blocks['open_weather_initialize'] = {
		init: function () {
			this.setHelpUrl('https://projects.wyliodrin.com/wiki/languages/visual#write');
			this.setColour(200);
			this.appendDummyInput()
				.appendField('Initialize Open Weather App');
			this.appendDummyInput()
				.appendField('City')
				.appendField(new Blockly.FieldTextInput('city'), 'city_value');
			// this.appendDummyInput()
			// 	.appendField('Country code')
			// 	.appendField(new Blockly.FieldTextInput('country_code'), 'country_code_value');
			this.appendDummyInput()
				.appendField('API key')
				.appendField(new Blockly.FieldTextInput('api_key'), 'api_key_value');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Initializes connection to OpenWeatherMap');
		}
	};
	
	Blockly.Blocks['open_weather_get_data'] = {
		init: function () {
			this.setColour(200);
			this.appendDummyInput()
				.appendField('Get');
			this.appendDummyInput()
				.appendField(new Blockly.FieldDropdown([['coordinates','coord'],['temperature', 'temp'], ['feel-like temperature', 'temp_feels'], ['weather description', 'weather_desc'], ['weather icon name', 'weather_icon']]), 'type');
			this.appendDummyInput()
				.appendField('from OpenWeatherMap');
			this.setInputsInline(true);
			this.setOutput(true);
			this.setTooltip('Returns the information based on the selected type');
		}
	};

	//Peripheral

	Blockly.Blocks['analog_read_initialize'] = {
		init: function () {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(123);
			this.appendValueInput('pin')
				.appendField('Initialize analog input pin');
			this.appendDummyInput()
				.appendField('with pin name')
				.appendField(new Blockly.FieldTextInput('pinName1'), 'pin_name');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setInputsInline(false);
			this.setTooltip('Initialize pin for analog read');
		}
	};

	Blockly.Blocks['analog_read_get_value'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(123);
			this.appendDummyInput()
				.appendField('Get analog value from pin')
				.appendField(new Blockly.FieldTextInput('pinName1'), 'pin_name');
			this.setOutput(true);
			this.setTooltip('Analog read on pin');
		}
	};

	Blockly.Blocks['pwm_initialize'] = {
		init: function () {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(123);
			this.appendValueInput('pin')
				.appendField('Initialize PWM pin');
			this.appendDummyInput()
				.appendField('with pin name')
				.appendField(new Blockly.FieldTextInput('pinName1'), 'pin_name');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setInputsInline(false);
			this.setTooltip('Initialize pin for PWM write');
		}
	};

	Blockly.Blocks['pwm_set_frequency'] = {
		init: function () {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(123);
			this.appendValueInput('frequency')
				.appendField('Set frequency');
			this.appendDummyInput()
				.appendField('Hz for pin')
				.appendField(new Blockly.FieldTextInput('pinName1'), 'pin_name');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setInputsInline(false);
			this.setTooltip('Set frequency for PWM pin');
		}
	};

	Blockly.Blocks['pwm_set_duty_cycle'] = {
		init: function () {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(123);
			this.appendValueInput('duty_cycle')
				.appendField('Set duty cycle');
			this.appendDummyInput()
				.appendField('% for pin')
				.appendField(new Blockly.FieldTextInput('pinName1'), 'pin_name');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setInputsInline(false);
			this.setTooltip('Set duty cycle for PWM pin');
		}
	};

	Blockly.Blocks['digital_write'] = {
		init: function () {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(123);
			this.appendDummyInput()
				.appendField('Set ');
			this.appendDummyInput()
				.appendField(new Blockly.FieldDropdown([['LOW', '0'], ['HIGH', '1']]), 'mode');
			this.appendDummyInput()
				.appendField('pin');
			this.appendValueInput('pin');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setInputsInline(true);
			this.setTooltip('Digital write on pin');
		}
	};

	Blockly.Blocks['digital_read_initialize'] = {
		init: function () {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(123);
			this.appendValueInput('pin')
				.appendField('Initialize digital input pin');
			this.appendDummyInput()
				.appendField('with pull')
				.appendField(new Blockly.FieldDropdown([['up', 'up'],['down','down']]),'resistor_type')
				.appendField('resistor');
			this.appendDummyInput()
				.appendField('and pin name')
				.appendField(new Blockly.FieldTextInput('pinName1'), 'pin_name');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setInputsInline(false);
			this.setTooltip('Initialize pin for digital read');
		}
	};

	Blockly.Blocks['digital_read_get_value'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(123);
			this.appendDummyInput()
				.appendField('Get digital value from pin')
				.appendField(new Blockly.FieldTextInput('pinName1'), 'pin_name');
			this.setOutput(true);
			this.setTooltip('Digital read on pin');
		}
	};

	Blockly.Blocks['led_on'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(123);
			this.appendDummyInput()
				.appendField('LED ON');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Turn on the board\'s led');
		}
	};

	Blockly.Blocks['led_off'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(123);
			this.appendDummyInput()
				.appendField('LED OFF');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Turn off the board\'s led');
		}
	};

	//TIME

	Blockly.Blocks['wait'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(240);
			this.appendDummyInput()
				.appendField('Wait');
			this.appendValueInput('seconds');
			this.appendDummyInput()
				.appendField('s');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Pauses the execution of the program for the given number of seconds');
		}
	};

	//WIFI

	Blockly.Blocks['connect_to_wifi'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(180);
			this.appendDummyInput()
				.appendField('Connect to Wifi');
			this.appendDummyInput()
				.appendField('SSID')
				.appendField(new Blockly.FieldTextInput('ssid'), 'ssid_value');
			this.appendDummyInput()
				.appendField('Password')
				.appendField(new Blockly.FieldTextInput('password'), 'password_value');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Connects the board to wifi');
		}
	};
	
	
	//Web Communication 

	Blockly.Blocks['close_connection'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(180);
			this.appendDummyInput()
				.appendField('Close connection');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Closes the currently opened connection');
		}
	};

	Blockly.Blocks['initialize_communication'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(180);
			this.appendDummyInput()
				.appendField('Initialize Web Communication');
			this.appendDummyInput()
				.appendField('Host IP')
				.appendField(new Blockly.FieldTextInput('ip'), 'ip_value');
			this.appendDummyInput()
				.appendField('Port')
				.appendField(new Blockly.FieldTextInput('80'), 'port_value');	
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Initializes the communication with the given host');
		}
	};

	Blockly.Blocks['initialize_communication_simple'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(180);
			this.appendDummyInput()
				.appendField('Initialize Web Communication');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Initializes the web communicatio');
		}
	};

	Blockly.Blocks['listen_for_connections'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(180);
			this.appendDummyInput()
				.appendField('When client connected');
			this.appendStatementInput('statements')
				.appendField('do');
			this.appendStatementInput('onError')
				.appendField('on error');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Is waiting for a client to connect. Performs the statements from \'do\' when a client has connected and the statements in \'on error\' when an error occured');
		}
	};
	
	Blockly.Blocks['send_response'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(180);
			this.appendDummyInput()
				.appendField('Send response');
			this.appendDummyInput()
				.appendField('Status code')
				.appendField(new Blockly.FieldTextInput('code'), 'status_code_value');
			this.appendDummyInput()
				.appendField('Content type')
				.appendField(new Blockly.FieldDropdown([['text', '0'], ['html', '1'], ['json', '2']]), 'content_type_value');
			this.appendValueInput('message_value')
				.appendField('Message');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Sends a response back to the client');
		}
	};

	
	Blockly.Blocks['send_response_error'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(180);
			this.appendDummyInput()
				.appendField('Send error response');
			this.appendDummyInput()
				.appendField('Content type')
				.appendField(new Blockly.FieldDropdown([['text', '0'], ['html', '1'], ['json', '2']]), 'content_type_value');
			this.appendValueInput('message_value')
				.appendField('Message');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Sends an error response back to the client');
		}
	};

	
	Blockly.Blocks['send_response_ok'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(180);
			this.appendDummyInput()
				.appendField('Send success response');
			this.appendDummyInput()
				.appendField('Content type')
				.appendField(new Blockly.FieldDropdown([['text', '0'], ['html', '1'], ['json', '2']]), 'content_type_value');
			this.appendValueInput('message_value')
				.appendField('Message');
			this.setPreviousStatement(true);
			this.setNextStatement(true);
			this.setTooltip('Sends a success response back to the client');
		}
	};


	Blockly.Blocks['get_request_content'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(180);
			this.appendDummyInput()
				.appendField('Get request content');
			this.setOutput(true, 'String');
			this.setTooltip('Returns the received request\'s content');
		}
	};

	Blockly.Blocks['request_topic'] = {
		init: function() {
			this.setHelpUrl('http://www.example.com/');
			this.setColour(180);
			this.appendDummyInput()
				.appendField('request topic is')
				.appendField(new Blockly.FieldTextInput('text'), 'text_value');
			this.setInputsInline(true);
			this.setOutput(true, 'Boolean');
			this.setTooltip('Returns true if the request contains the given string, false otherwise.');
		}
	};

};